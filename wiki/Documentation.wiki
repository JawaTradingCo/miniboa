#Project Documentation

= Introduction =

Miniboa is a couple files of Python code that provide a bare-bones Telnet server to use as the base for MUD or similar interactive server.  Miniboa has a couple of nice features for this type of application.

  * Asynchronous - no waiting on player input or state. 
  * An external game loop - you decide when to poll for data.   
  * Single threaded - simplifies game design and provides excellent speed.  
  * Supports 1,000 connections on Linux and 512 on Windows (untested)


= Telnet Server =

Creating a Telnet Server is pretty simple.  In fact, you can run one with the following three lines of code:

{{{
from miniboa.async import TelnetServer
server = TelnetServer()
while True: server.poll()
}}}

This will launch a server listening on the default port, 7777, that accepts Telnet connections and sends a simple greeting;
{{{
$ telnet localhost 7777
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Greetings from Miniboa!  Now it's time to add your code.
}}}

Initialization arguments for TelnetServer are;

{{{
server = TelnetServer(port=my_port, address=my_address, on_connect=my_connect_handler, on_disconnect=my_disconnect_handler) 

  * port - the network port you want the server to listen for new connections on.  You should be aware that on Linux, port numbers 1024 and below are restricted for use by normal users.  The default is port 7777.

  * address - this is the address of the _local network interface_ you wish the server to listen on.  You can usually omit this parameter (or pass an empty string; '') which causes it to listen on any viable NIC.  Unless your server is directly connected to the Internet (doubtful today) do not set this to the Internet IP address of your server.  The default is an empty string.  

  * on_connect - this is the handler function that is called by the server when a new connection is made.  It will be passed a Telnet client object the new user.  The default is a dummy function that greets the visitor and prints their connection info to stdout. 

  * on_disconnect - this is the hander function that is called by the server when connection is lost.  It will be passed the Telnet client object of the lost user.  The default is a dummy function that prints the lost connection info to stdout.

== Initializing Arguments ==




== Telnet Server Properties ==

  * .port - port the server is listening to
  * .address - address of the local network interface the server is listening to.  See the explanation of this parameter above. 


== Telnet Server Methods ==




= Client Objects =




= License =

Copyright 2009 Jim Storch.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 